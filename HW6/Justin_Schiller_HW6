# Justin Schiller

import getopt
import sys

class Node:
	def __init__(self):
		self.marginal = 0
		self.conditionals = {}
		self.name = ""
		self.parents = []
		self.grandparents = []
		self.children = []
		self.grandchildren = []

def createNet():
	pNode = Node()
	sNode = Node()
	cNode = Node()
	xNode = Node()
	dNode = Node()
	
	pNode.name = "p"
	sNode.name = "s"
	cNode.name = "c"
	xNode.name = "x"
	dNode.name = "d"
	
	pNode.children.append("c")
	sNode.children.append("c")
	cNode.children.append("x")
	cNode.children.append("d")
	
	pNode.grandchildren.append("x")
	pNode.grandchildren.append("d")
	sNode.grandchildren.append("x")
	sNode.grandchildren.append("d")
	
	cNode.parents.append("s")
	cNode.parents.append("p")
	xNode.parents.append("c")
	dNode.parents.append("c")
	
	xNode.grandparents.append("p")
	xNode.grandparents.append("s")
	dNode.grandparents.append("p")
	dNode.grandparents.append("s")
	
	pNode.marginal = 0.9
	sNode.marginal = 0.3
	
	cNode.conditionals["~ps"] = 0.05
	cNode.conditionals["s~p"] = 0.05
	cNode.conditionals["~p~s"] = 0.02
	cNode.conditionals["~s~p"] = 0.02
	cNode.conditionals["ps"] = 0.03
	cNode.conditionals["sp"] = 0.03
	cNode.conditionals["p~s"] = 0.001
	cNode.conditionals["~sp"] = 0.001
	xNode.conditionals["c"] = 0.9
	xNode.conditionals["~c"] = 0.2
	dNode.conditionals["c"] = 0.65
	dNode.conditionals["~c"] = 0.3
	
	nodenet = {"smoker": sNode, "pollution": pNode, "cancer": cNode, "xray": xNode, "dyspnoea": dNode}
	return nodenet

def parseVars(variables):
	varList = []
	length = len(variables)
	i = 0
	while (i < length):
		if variables[i] == '~':
			i = i + 1
			var = variables[i-1] + variables[i]
			varList.append(var)
		else:
			varList.append(variables[i])
		i = i + 1
	return varList

def jointParse(arg):
	jointVarList = []
	arg2 = ""
	argLength = len(arg)
	i = 0
	while (i < argLength):
		if arg[i] == "~":
			i = i + 1
		arg2 = arg2 + arg[i].lower()
		i = i + 1
	length = len(arg2)
	for i in range(0, length):
		newVar = []
		if len(jointVarList) == 0:
			newVar.append(arg2[i])
			newVar.append("~" + arg2[i])
		else: 
		    for var in jointVarList:
			    newVar.append(var + arg2[i])
			    newVar.append(var + "~" + arg2[i])
		jointVarList = newVar
	return jointVarList
	
def setPrior(net, arg, value):
	if arg == "p" or arg == "P":
		node = net["pollution"]
		node.marginal = value
	elif arg == "s" or arg == "S":
		node = net["smoker"]
		node.marginal = value
	else:
		print("Cannot set the prior for this variable")
	
def calcMarginal(net, arg):
	notFlag = False
	if arg[0] == "~":
		notFlag = True
		arg = arg[1]
	if arg == "P" or arg == "p":
		node = net["pollution"]
		marginal = node.marginal
	elif arg == "S" or arg == "s":
		node = net["smoker"]
		marginal = node.marginal
	elif arg == "C" or arg == "c":
		node = net["cancer"]
		conditionals = node.conditionals
		pollution = net["pollution"]
		smoker = net["smoker"]
		marginal = conditionals["~ps"]*(1-pollution.marginal)*(smoker.marginal) + conditionals["~p~s"]*(1-pollution.marginal)*(1-smoker.marginal) + conditionals["ps"]*pollution.marginal*smoker.marginal + conditionals["p~s"]*pollution.marginal*(1-smoker.marginal)
	elif arg == "X" or arg == "x":
		node = net["xray"]
		conditionals = node.conditionals
		cancerMarginal = calcMarginal(net, "C")
		marginal = conditionals["c"]*cancerMarginal + conditionals["~c"]*(1-cancerMarginal)
	elif arg == "D" or arg == "d":
		node = net["dyspnoea"]
		conditionals = node.conditionals
		cancerMarginal = calcMarginal(net, "c")
		marginal = conditionals["c"]*cancerMarginal + conditionals["~c"]*(1-cancerMarginal)
	else:
		print("Requesting marginal distribution for an invalid variable")
		return 0
	if notFlag == True:
		return 1-marginal
	else:
		return marginal

def calcJointProbability(net, arg):
	probability = 1
	length = len(arg)
	i = 0
	while (i < length):
		if arg[i] == "~":
			i = i + 1
			arg2 = "~" + arg[i]
			probability = probability * calcConditional(net, arg2, arg[i+1:])
		else:
			probability = probability * calcConditional(net, arg[i], arg[i+1:])
		i = i + 1
	return probability

def calcJointDistribution(net, arg):
	variableList = jointParse(arg)
	probabilities = {}
	if arg in variableList:
		return calcJointProbability(net, arg)
	else:
	    for var in variableList: 
		    probabilities[var] = calcJointProbability(net, var)
	    return probabilities	

def calcConditional(net, arg, con):
	notFlag = False
	if arg[0] == '~':
		notFlag = True
		arg2 = arg[1]
		if arg2 in con and arg not in con:
			return 0
		elif arg2 in con and arg in con:
			return 1
	else:
		arg2 = arg
		if arg2 in con and ("~" + arg2) not in con:
			return 1
		elif arg2 in con and ("~" + arg2) in con:
			return 0
	conList = parseVars(con)
	if arg2 == "p":
		node = net["pollution"]
	elif arg2 == "s":
		node = net["smoker"]
	elif arg2 == "c":
		node = net["cancer"]
	elif arg2 == "x":
		node = net["xray"]
	elif arg2 == "d":
		node = net["dyspnoea"]
	else:
		print("Requesting conditional distribution for an invalid variable: ", arg)
	if (len(conList) == 0):
		return calcMarginal(net, arg)
	elif con in node.conditionals:
		conditional = node.conditionals[con]
	elif (len(conList) == 1):
		conditional = calc1Con(node, net, conList[0])
	elif (len(conList) == 2):
		return calc2Con(arg, net, conList)
	elif (len(conList) == 3):
		conditional = calc3Con(arg, net, conList)
	if notFlag:
		return 1 - conditional
	else:
		return conditional
	return 1

def calc1Con(node, net, con):
	notFlag = False
	if con[0] == "~":
		notFlag = True
		con2 = con[1]
	else:
		con2 = con
	arg = node.name
	if arg == "p" or arg == "s":
		if con2 == "p" or con2 == "s":
			return calcMarginal(net, arg)
		elif con2 == "c":
			return (calcConditional(net, con, arg)*calcMarginal(net, arg))/calcMarginal(net, con)
		elif con2 == "d" or con2 == "x":
			cond1 = calcConditional(net, arg, "c")*calcConditional(net, "c", con)
			cond2 = calcConditional(net, arg, "~c")*calcConditional(net, "~c", con)
			return cond1 + cond2
	elif arg == "c":
		if con2 == "p":
			return calcConditional(net, arg, con+"s")*calcMarginal(net, "s") + calcConditional(net, arg, con + "~s")*calcMarginal(net, "~s")
		elif con2 == "s":
			return calcConditional(net, arg, con+"p")*calcMarginal(net, "p") + calcConditional(net, arg, con + "~p")*calcMarginal(net, "~p")
		elif con2 == "d" or con2 == "x":
			return (calcConditional(net, con, arg)*calcMarginal(net, arg))/calcMarginal(net, con)
	elif arg == "d" or arg == "x":
		if con2 == "d" or con2 == "x":
			cond1 = calcConditional(net, arg, "c")*calcConditional(net, "c", con)
			cond2 = calcConditional(net, arg, "~c") * calcConditional(net, "~c", con)
			return cond1 + cond2
		elif con2 == "s" or con2 == "p":
			cond1 = calcConditional(net, arg, "c")*calcConditional(net, "c", con)
			cond2 = calcConditional(net, arg, "~c") * calcConditional(net, "~c", con)
			return cond1 + cond2
	
def calc2Con(arg, net, conditionals):
	conditional1 = conditionals[0]
	conditional2 = conditionals[1]
	if conditional1[0] == "~":
		con1 = conditional1[1]
	else:
		con1 = conditional1
	if conditional2[0] == "~":
		con2 = conditional2[1]
	else:
		con2 = conditional2
	if arg[0] == "~":
		arg2 = arg[1]
	else:
		arg2 = arg
	if arg2 == "p" or arg2 == "s":
		if con1 == "x" or con2 == "d":
			if con2 == "x" or con2 == "d":
				cond1 = calcConditional(net, arg, "c")*calcConditional(net, "c", conditionals[0]+conditionals[1])
				cond2 = calcConditional(net, arg, "~c")*calcConditional(net, "~c", conditionals[0]+conditionals[1])
				return cond1 + cond2
			elif con2 == "s" or con2 == "p":
				cond1 = calcConditional(net, arg, conditionals[1] + "c")*calcConditional(net, "c", conditionals[1]+conditionals[0])
				cond2 = calcConditional(net, arg, conditionals[1] + "~c")*calcConditional(net, "~c", conditionals[1]+conditionals[0])
				return cond1 + cond2
			elif con2 == "c":
				return calcConditional(net, arg, conditionals[1])
		elif con1 == "p" or con1 == "s":
			if con2 == "c":
				condNum = calcConditional(net, conditionals[1], arg + conditionals[0])*calcJointProbability(net, arg + conditionals[0])
				condDen = calcConditional(net, conditionals[0], conditionals[1])*calcMarginal(net, conditionals[1])
				return condNum/condDen
			elif con2 == "x" or con2 == "d":
				cond1 = calcConditional(net, arg, conditionals[0] + "c")*calcConditional(net, "c", conditionals[1]+conditionals[0])
				cond2 = calcConditional(net, arg, conditionals[0] + "~c")*calcConditional(net, "~c", conditionals[1]+conditionals[0])
				return cond1 + cond2
		elif con1 == "c":
			if con2 == "x" or con2 == "d":
				return calcConditional(net, arg, conditionals[0])
			elif con2 == "s" or con2 == "p":
				condNum = calcConditional(net, conditionals[0], arg + conditionals[1])*calcJointProbability(net, arg + conditionals[1])
				condDen = calcConditional(net, conditionals[1], conditionals[0])*calcMarginal(net, conditionals[0])
				return condNum/condDen
	elif arg2 == "c":
		if con1 == "x" or con1 == "d":
			return calcConditional(net, arg, conditionals[1])
		elif con2 == "x" or con2 == "d":
			return calcConditional(net, arg, conditionals[0])
		else:
			condNum = calcConditional(net, conditionals[0], conditionals[1]) * calcJointProbability(net, arg + conditionals[0])
			condDen = calcMarginal(net, conditionals[0]) * calcMarginal(net, conditionals[1])
			return condNum/condDen
	elif arg2 == "d" or arg2 == "x":
		if con1 == "x" or con1 == "d":
			if con2 == "c":
				return calcConditional(net, arg, conditionals[1])
			else:
				cond1 = calcConditional(net, arg, "c")*calcConditional(net, "c", conditionals[1])
				cond2 = calcConditional(net, arg, "~c")*calcConditional(net, "~c", conditionals[1])
				return cond1 + cond2
		elif con1 == "c":
			if con2 == "x" or con2 == "d":
				return calcConditional(net, arg, conditionals[0])
			elif con2 == "s" or con2 == "p":
				return calcConditional(net, arg, conditionals[0])
		elif con1 == "p" or con2 == "s":
			if con2 == "s" or con2 == "p":
				cond1 = calcConditional(net, arg, "c") * calcConditional(net, "c", conditionals[0]+conditionals[1])
				cond2 = calcConditional(net, arg, "~c") * calcConditional(net, "~c", conditionals[0]+conditionals[1])
				return cond1 + cond2
			elif con2 == "d" or con2 == "x":
				cond1 = calcConditional(net, arg, "c")*calcConditional(net, "c", conditionals[0])
				cond2 = calcConditional(net, arg, "~c")*calcConditional(net, "~c", conditionals[0])
				return cond1 + cond2
			elif con2 == "c": 
				return calcConditional(net, arg, conditionals[1])

def calc3Con(arg, net, conditionals):
	conditional1 = conditionals[0]
	conditional2 = conditionals[1]
	conditional3 = conditionals[2]
	if conditional1[0] == "~":
		con1 = conditional1[1]
	else:
		con1 = conditional1
	if conditional2[0] == "~":
		con2 = conditional[1]
	else:
		con2 = conditional2
	if conditional3[0] == "~":
		con3 = conditional3[1]
	else:
		con3 = conditional3
	if arg[0] == "~":
		arg2 = arg[1]
	else:
		arg2 = arg	
	if arg2 == "s" or arg2 == "p":
		if con1 == "p" or con1 == "s":
			if con2 == "x" or con2 == "d":
				if con3 == "x" or con3 == "d":
					cond1 = calcConditional(net, arg, conditional1 + "c")*calcConditional(net, "c", conditional2 + conditional3)
					cond2 = calcConditional(net, arg, conditional1 + "~c")*calcConditional(net, "~c", conditional2 + conditional3)
					return cond1 + cond2
				elif con3 == "c":
					return calcConditional(net, arg, conditional3+conditional1)
			elif con2 == "c":
				return calcConditional(net, arg, conditional2 + conditional1)
		elif con1 == "d" or con1 == "x":
			if con2 == "d" or con2 == "s":
				if con3 == "p" or con3 == "s":
					cond1 = calcConditional(net, arg, conditional3 + "c")*calcConditional(net, "c", conditional1+conditional2)
					cond2 = calcConditional(net, arg, conditional3 + "~c")*calcConditional(net, "~c", conditional1+conditional2)
					return cond1 + cond2
				elif con3 == "c":
					return calcConditional(net, arg, conditional3)
			elif con2 == "c":
				if con3 == "p" or con3 == "s":
					return calcConditional(net, arg, conditional3 + conditional2)
				elif con3 == "d" or con3 == "x":
					return calcConditional(net, arg, conditional3)
		elif con1 == "c":
			if con2 == "d" or con2 == "x":
				if con3 == "d" or con3 == "x":
					return calcConditional(net, arg, conditional1)
				elif con3 == "p" or con3 == "s":
					return calcConditional(net, arg, conditional1 + conditional3)
			elif con2 == "s" or con2 == "p":
				return calcConditional(net, arg, conditional1 + conditional2)
				
	elif arg2 == "c":
		if con1 == "p" or con1 == "s":
			if con2 == "p" or con2 == "s" or con3 == "p" or con3 == "s":
				return calcConditional(net, arg, conditional1+conditional2)
			else:
				return calcConditional(net, arg, conditional1 + conditional2)
		elif con1 == "d" or con1 == "x":
			if con2 == "d" or con2 == "x" or con3 == "d" or con3 == "x":
				return calcConditional(net, arg, conditional2 + conditional3)
			else:
				return calcConditional(net, arg, conditional2 + conditional3)
	elif arg2 == "d" or arg2 == "x":
		if con1 == "p" or con1 == "s":
			if con2 == "p" or con2 == "s":
				if con3 == "c":
					return calcConditional(net, arg, conditional3)
				elif con3 == "d" or con3 == "x":
					cond1 = calcConditional(net, arg, "c" + conditional3)*calcConditional(net, "c", conditional2 + conditional1)
					cond2 = calcConditional(net, arg, "~c" + conditional3)*calcConditional(net, "~c", conditional2 + conditional1)
					return cond1 + cond2
			elif con2 == "d" or con2 == "x":
				if con3 == "c":
					calcConditional(net, arg, conditional3)
				elif con3 == "s" or con3 == "p":
					cond1 = calcConditional(net, arg, condition2 + "c") * calcConditional(net, "c", condition1 + condition3)
					cond2 = calcConditional(net, arg, condition2 + "~c") * calcConditional(net, "~c", condition1 + condition3)
			elif con2 == "c":
				if con3 == "x" or con3 == "d":
					return calcConditional(net, arg, conditional2)
				elif con3 == "s" or con3 == "p":
					return calcConditonal(net, arg, conditional2)
		elif con1 == "d" or con1 == "x":
			if con2 == "c" or con3 == "c":
				return calcConditional(net, arg, conditional2)
			else:
				cond1 = calcConditional(net, arg, condition1 + "c") * calcConditional(net, "c", condition2 + condition3)
				cond2 = calcConditional(net, arg, condition1 + "~c") * calcConditional(net, "~c", condition2 + condition3)
		elif con1 == "c":
			if con2 == "d" or con2 == "x" or con3 == "d" or con3 == "x":
				return calcConditional(net, arg, conditional1)
			else:
				return calcConditional(net, arg, conditional1)
def main():
    bayesNet = createNet()
    try:
        opts, args = getopt.getopt(sys.argv[1:], "m:g:j:p:")
    except getopt.GetoptError as err:
        print(err)
        sys.exit(2)
    for o, a in opts:
        if o in ("-p"):
            setPrior(bayesNet, a[0], float(a[1:]))
        elif o in ("-m"):
            marginal = calcMarginal(bayesNet, a)
            print("marginal", a, marginal)
        elif o in ("-g"):
            p = a.find("|")
            conditional = calcConditional(bayesNet, a[:p], a[p+1:])
            print("conditional", a, conditional)
        elif o in ("-j"):
            print(calcJointDistribution(bayesNet, a))
        else:
            assert False, "unhandled option"
		
    # ...

if __name__ == "__main__":
    main()


